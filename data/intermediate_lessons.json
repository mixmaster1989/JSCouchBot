[
  {
    "title": "Замыкания",
    "content": "Замыкания позволяют функции запоминать переменные из внешнего окружения, даже если эта функция вызывается вне этого окружения.",
    "task": {
      "question": "Как называется механизм, позволяющий функции запоминать переменные из внешнего окружения?",
      "answer": "Замыкание",
      "wrongAnswers": ["Контекст", "Область видимости", "Функция"]
    }
  },
  {
    "title": "Контекст вызова",
    "content": "Контекст вызова (`this`) зависит от того, как была вызвана функция.",
    "task": {
      "question": "Как называется объект, определяющий контекст вызова функции?",
      "answer": "this",
      "wrongAnswers": ["window", "function", "scope"]
    }
  },
  {
    "title": "Прототипы",
    "content": "Прототипы позволяют объектам наследовать свойства и методы других объектов.",
    "task": {
      "question": "Как называется механизм, позволяющий объектам наследовать свойства и методы?",
      "answer": "Прототип",
      "wrongAnswers": ["Класс", "Функция", "Массив"]
    }
  },
  {
    "title": "Асинхронные функции",
    "content": "Асинхронные функции позволяют писать асинхронный код, который выглядит как синхронный.",
    "task": {
      "question": "Как называется функция, которая позволяет писать асинхронный код в синхронном стиле?",
      "answer": "async",
      "wrongAnswers": ["await", "promise", "callback"]
    }
  },
  {
    "title": "Модули ES6",
    "content": "Модули ES6 позволяют импортировать и экспортировать код между файлами.",
    "task": {
      "question": "Как называется механизм в ES6 для разделения кода на файлы?",
      "answer": "Модули",
      "wrongAnswers": ["Классы", "Функции", "Объекты"]
    }
  },
  {
    "title": "Promise",
    "content": "Promise — это объект, представляющий результат асинхронной операции.",
    "task": {
      "question": "Как называется объект, представляющий результат асинхронной операции?",
      "answer": "Promise",
      "wrongAnswers": ["Callback", "Async", "Await"]
    }
  },
  {
    "title": "Event Loop",
    "content": "Event Loop — это механизм, который позволяет JavaScript обрабатывать асинхронные операции.",
    "task": {
      "question": "Как называется механизм, который позволяет JavaScript обрабатывать асинхронные операции?",
      "answer": "Event Loop",
      "wrongAnswers": ["Callback Queue", "Promise", "Thread"]
    }
  },
  {
    "title": "Set и Map",
    "content": "Set и Map — это структуры данных, добавленные в ES6 для работы с уникальными значениями и парами ключ-значение.",
    "task": {
      "question": "Как называется структура данных для хранения уникальных значений?",
      "answer": "Set",
      "wrongAnswers": ["Map", "Array", "Object"]
    }
  },
  {
    "title": "WeakMap и WeakSet",
    "content": "WeakMap и WeakSet — это структуры данных, которые позволяют хранить слабые ссылки на объекты.",
    "task": {
      "question": "Как называется структура данных, которая позволяет хранить слабые ссылки на объекты?",
      "answer": "WeakMap",
      "wrongAnswers": ["WeakSet", "Map", "Set"]
    }
  },
  {
    "title": "Деструктуризация",
    "content": "Деструктуризация позволяет извлекать значения из массивов или объектов в отдельные переменные.",
    "task": {
      "question": "Как называется процесс извлечения значений из массивов или объектов?",
      "answer": "Деструктуризация",
      "wrongAnswers": ["Рефакторинг", "Копирование", "Сериализация"]
    }
  },
  {
    "title": "Spread и Rest операторы",
    "content": "Spread и Rest операторы позволяют работать с массивами и объектами более удобно.",
    "task": {
      "question": "Как называется оператор, который позволяет разворачивать массивы или объекты?",
      "answer": "Spread",
      "wrongAnswers": ["Rest", "Destructuring", "Concat"]
    }
  },
  {
    "title": "Классы ES6",
    "content": "Классы ES6 предоставляют синтаксический сахар для работы с прототипами.",
    "task": {
      "question": "Как называется синтаксический сахар для работы с прототипами?",
      "answer": "Классы",
      "wrongAnswers": ["Функции", "Модули", "Объекты"]
    }
  },
  {
    "title": "Геттеры и сеттеры",
    "content": "Геттеры и сеттеры позволяют управлять доступом к свойствам объектов.",
    "task": {
      "question": "Как называются методы, которые управляют доступом к свойствам объектов?",
      "answer": "Геттеры и сеттеры",
      "wrongAnswers": ["Методы", "Функции", "Классы"]
    }
  },
  {
    "title": "Proxy",
    "content": "Proxy позволяет перехватывать операции с объектами и изменять их поведение.",
    "task": {
      "question": "Как называется объект, который позволяет перехватывать операции с другими объектами?",
      "answer": "Proxy",
      "wrongAnswers": ["Reflect", "Handler", "Interceptor"]
    }
  },
  {
    "title": "Reflect",
    "content": "Reflect предоставляет методы для работы с объектами и их свойствами.",
    "task": {
      "question": "Как называется объект, предоставляющий методы для работы с объектами?",
      "answer": "Reflect",
      "wrongAnswers": ["Proxy", "Object", "Handler"]
    }
  },
  {
    "title": "Модули CommonJS",
    "content": "CommonJS — это стандарт для модулей в Node.js.",
    "task": {
      "question": "Как называется стандарт модулей в Node.js?",
      "answer": "CommonJS",
      "wrongAnswers": ["ES6 Modules", "AMD", "UMD"]
    }
  },
  {
    "title": "Асинхронные итераторы",
    "content": "Асинхронные итераторы позволяют перебирать данные, которые поступают асинхронно.",
    "task": {
      "question": "Как называется механизм для перебора данных, поступающих асинхронно?",
      "answer": "Асинхронные итераторы",
      "wrongAnswers": ["Promise", "Callback", "Event Loop"]
    }
  },
  {
    "title": "Генераторы",
    "content": "Генераторы позволяют создавать функции, которые могут приостанавливать своё выполнение.",
    "task": {
      "question": "Как называется функция, которая может приостанавливать своё выполнение?",
      "answer": "Генератор",
      "wrongAnswers": ["Итератор", "Callback", "Promise"]
    }
  },
  {
    "title": "Web Workers",
    "content": "Web Workers позволяют выполнять код в отдельных потоках.",
    "task": {
      "question": "Как называется механизм для выполнения кода в отдельных потоках?",
      "answer": "Web Workers",
      "wrongAnswers": ["Threads", "Event Loop", "Async"]
    }
  },
  {
    "title": "Service Workers",
    "content": "Service Workers позволяют создавать оффлайн-приложения и кэшировать ресурсы.",
    "task": {
      "question": "Как называется механизм для создания оффлайн-приложений?",
      "answer": "Service Workers",
      "wrongAnswers": ["Web Workers", "Cache API", "IndexedDB"]
    }
  }
]